"""empty message

Revision ID: 020489cb075f
Revises: a37f21645ba2
Create Date: 2020-05-28 01:50:58.946705

"""
from alembic import op
import sqlalchemy as sa
import json

from datetime import datetime



# revision identifiers, used by Alembic.
revision = '020489cb075f'
down_revision = 'a37f21645ba2'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('students',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teachers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('about', sa.Text(), nullable=True),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('picture', sa.Text(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('goals', sa.String(), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('about'),
    sa.UniqueConstraint('picture')
    )
    op.create_table('teacher_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('goal', sa.String(), nullable=True),
    sa.Column('time_ability', sa.String(), nullable=True),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teacher_slots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=True),
    sa.Column('week_day', sa.String(length=10), nullable=False),
    sa.Column('time', sa.String(length=5), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('week_day', sa.String(length=10), nullable=False),
    sa.Column('time', sa.String(length=5), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=True),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.Column('slot_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['slot_id'], ['teacher_slots.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    ##### получаем данные из json файла
    with open('data.json', 'r') as f:
        lst_data = json.load(f)

    ##### добавляем данные в БД
    teacher_table = sa.table('teachers',
                             sa.Column('id', sa.Integer()),
                             sa.Column('name', sa.String()),
                             sa.Column('about', sa.Text()),
                             sa.Column('rating', sa.Float()),
                             sa.Column('picture', sa.Text()),
                             sa.Column('price', sa.Integer()),
                             sa.Column('goals', sa.String()),
                             sa.Column('date_created', sa.DateTime()))
    slot_table = sa.table('teacher_slots',
                          sa.Column('id', sa.Integer()),
                          sa.Column('teacher_id', sa.Integer()),
                          sa.Column('week_day', sa.String()),
                          sa.Column('time', sa.String()),
                          sa.Column('is_available', sa.Boolean()),
                          sa.Column('date_created', sa.DateTime()))

    lst_teachers = []
    lst_slots = []
    slot_id = 0
    for i, t in enumerate(lst_data[1]):
        lst_teachers.append({'id': t['id']+1, 'name': t['name'], 'about': t['about'],
                             'rating': t['rating'], 'picture': t['picture'],
                             'price': t['price'], 'goals': str(t['goals']),
                             'date_created': datetime.utcnow()})
        for key, value in t['free'].items():
            for sub_key, sub_value in value.items():
                slot_id += 1
                lst_slots.append({'id': slot_id+1, 'teacher_id': t['id']+1,
                                  'week_day': key, 'time': sub_key,
                                  'is_available': sub_value,
                                  'date_created': datetime.utcnow()})

    op.bulk_insert(teacher_table, lst_teachers)
    op.bulk_insert(slot_table, lst_slots)

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bookings')
    op.drop_table('teacher_slots')
    op.drop_table('teacher_requests')
    op.drop_table('teachers')
    op.drop_table('students')
    # ### end Alembic commands ###

    """Add any optional data upgrade migrations here!"""



